# Copyright © 2019 Clément Pit-Claudel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import re

import pygments
import pygments.lexers
from pygments.filters import TokenMergeFilter, NameHighlightFilter
from pygments.formatters import HtmlFormatter

from dominate import tags
from dominate.util import raw as dom_raw

from .pygments_lexer import CoqLexer
from .pygments_style import TangoSubtleStyle

LEXER = CoqLexer(ensurenl=False)  # pylint: disable=no-member
LEXER.add_filter(TokenMergeFilter())
FORMATTER = HtmlFormatter(nobackground=True, nowrap=True, style=TangoSubtleStyle)
WHITESPACE_RE = re.compile(r"^(\s*)((?:.*\S)?)(\s*)$", re.DOTALL)

def add_tokens(tokens):
    """Register additional `tokens` to add custom syntax highlighting.

    `tokens` should be a dictionary, whose keys indicate a type of token and
    whose values are lists of strings to highlight with that token type.

    This is particularly useful to highlight custom tactics or symbols.  For
    example, if your code defines a tactic ``map_eq`` to decide map equalities,
    and two tactics ``map_simplify`` and ``map_subst`` to simplify map
    expressions, you might write the following:

    >>> add_tokens({
    ...     'tacn-solve': ['map_eq'],
    ...     'tacn': ['map_simplify', 'map_subst']
    ... })
    """
    for kind, names in tokens.items():
        tokentype = LEXER.TOKEN_TYPES.get(kind)
        if not tokentype:
            raise ValueError("Unknown token kind: {}".format(kind))
        LEXER.add_filter(NameHighlightFilter(names=names, tokentype=tokentype))

def highlight(coqstr):
    """Highlight a Coq string `coqstr`.

    Return a ``dominate`` span with class ``highlight`` instead of raw html.
    This function is just a convenience wrapper around Pygments' machinery,
    using a custom Coq lexer and a custom style.

    To extract raw HTML, use ``span.render(pretty=False)``.  The generated code
    needs to be paired with a Pygments stylesheet, which can be generated by
    running the ``regen_tango_subtle_css.py`` script in the ``etc/`` folder of the
    Alectryon distribution.

    If you use Alectryon's command line interface directly, you won't have to
    jump through these last two hoops; it renders and writes out the HTML for
    you, with the appropriate CSS inlined.  It might be instructive to consult
    the implementation of ``alectryon.cli.write_webpage`` to see how it does it.
    """
    # Pygments HTML formatter adds an unconditional newline, so we pass it only
    # the code, and we restore the spaces after highlighting.
    before, code, after = WHITESPACE_RE.match(coqstr).groups()
    highlighted = pygments.highlight(code, LEXER, FORMATTER).strip()
    return tags.span(before, dom_raw(highlighted), after, cls="highlight")
