/*
Copyright © 2019 Clément Pit-Claudel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

.alectryon-io, .alectryon-toggle-label {
    font-family: 'Iosevka Slab Web', 'Iosevka Web', 'Fira Code', monospace;
    font-feature-settings: "XV00" 1; /* Use Coq ligatures when Iosevka is available */
    line-height: initial;
    overflow: visible;
    overflow-wrap: break-word;
    position: relative;
    white-space: pre-wrap;
}

/*
CoqIDE doesn't turn off the unicode bidirectional algorithm (and PG simply
respects the user's `bidi-display-reordering` setting), so don't turn it off
here either.  But beware unexpected results like `Definition test_אב := 0.`

.alectryon-io span {
    direction: ltr;
    unicode-bidi: bidi-override;
}

In any case, make an exception for comments:

.highlight .c {
    direction: embed;
    unicode-bidi: initial;
}
*/

.alectryon-toggle,
.alectryon-io .coq-toggle,
.alectryon-io .coq-extra-goals-toggle {
    display: none;
}

.alectryon-toggle-label,
.alectryon-io .coq-sentence[for],
.alectryon-io .coq-extra-goals-label {
    cursor: pointer;
}

.alectryon-toggle-label {
    display: block;
    font-size: 0.8rem;
}

.alectryon-io .coq-sentence[for] {
    padding: 0.1em 0; /* Enlarge the hitbox slightly to fill interline gaps */
    padding-right: 1rem; /* Prevent line wraps before the checkbox bubble */
}

.alectryon-io .coq-extra-goals-label {
    display: block;
    text-align: right;
}

.alectryon-toggle-label:before,
.alectryon-io .coq-sentence[for]:after,
.alectryon-io .coq-extra-goals-label:before {
    border: 1px solid #babdb6;
    border-radius: 1rem;
    content: '';
    display: inline-block;
    font-weight: bold;
    height: 0.25rem;
    margin-bottom: 0.15rem;
    vertical-align: middle;
    width: 0.75rem;
}

.alectryon-toggle-label:before,
.alectryon-io .coq-extra-goals-label:before {
    margin-right: 0.25rem;
}

.alectryon-io .coq-sentence[for]:after {
    margin-left: 0.25rem;
    margin-right: -1rem; /* Compensate for the anti-wrapping space */
}

@media (any-hover: hover) {
    .alectryon-toggle-label:hover:before,
    .alectryon-io .coq-sentence[for]:hover:after {
        background: #eeeeec;
    }

    .alectryon-io .coq-fragment .coq-sentence[for]:hover {
        text-decoration: underline dotted #babdb6;
    }

    .alectryon-io .coq-fragment .coq-sentence[for]:hover * {
        font-weight: bold;
    }

    .alectryon-io .coq-fragment:hover .coq-output:not(:hover) {
        display: block;
    }
}

.alectryon-toggle:checked + .alectryon-toggle-label:before,
.alectryon-io .coq-toggle:checked + .coq-sentence[for]:after,
.alectryon-io .coq-extra-goals-toggle:checked + .coq-extra-goals-label:before {
    background-color: #babdb6;
    border-color: #babdb6;
}

/* Disable clicks on sentences when the document-wide toggle is set. */
.alectryon-toggle:checked ~ .alectryon-io .coq-toggle + .coq-sentence[for] {
    cursor: unset;
    pointer-events: none;
}

/* Hide individual checkboxes when the document-wide toggle is set. */
.alectryon-toggle:checked ~ .alectryon-io .coq-toggle + .coq-sentence[for]:after {
    display: none;
}

.alectryon-io .coq-output {
    border-width: 1px 0;
    display: none; /* Displayed by the hover rule */
    left: 0;
    position: absolute;
    right: 0;
    top: 100%;
    z-index: 1;
}

.alectryon-io .coq-extra-goals {
    display: none;
}

/* If there's space, display goals to the right of the code, not below it. */
@media screen and (any-hover: hover) and (min-width: 90rem) {
    .alectryon-io {
        box-sizing: border-box; /* Needed so .coq-output won't overflow */
        width: 55%;
    }

    .alectryon-io .coq-output {
        bottom: 0;
        left: 100%;
        margin-top: -0.25rem;
        padding-left: 0.25rem;
        right: unset;
        top: 0;
        width: 81%; /* 81% of .alectryion-io's 55% is ~45% */
    }

    .alectryon-io .coq-output > div {
        /* This odd margin-bottom property prevents the sticky div from bumping
           against the bottom of its container (.coq-output).  The alternative
           would be enlarging .coq-output, but that would cause overflows,
           enlarging scrollbars and yielding scrolling towards the bottom of the
           page.  Doing things this way instead makes it possible to restrict
           .coq-output to a reasonable size (100%, through top = bottom = 0).
           See also https://stackoverflow.com/questions/43909940/. */
        margin-bottom: -200%;
        position: sticky;
        top: 0;
    }
}

.alectryon-io .coq-goals:not(:empty),
.alectryon-io .coq-responses:not(:empty) {
    background: #eeeeec;
    display: block;
    margin: 0.25rem 0;
    padding: 0.25rem;
}

.alectryon-toggle:checked ~ .alectryon-io {
    width: unset;
}

.alectryon-toggle:checked ~ .alectryon-io .coq-sentence[for] + .coq-output,
.alectryon-io .coq-toggle:checked + .coq-sentence[for] + .coq-output,
.alectryon-io .coq-extra-goals-toggle:checked ~ .coq-extra-goals {
    display: block;
    position: unset;
    margin: unset;
    padding: unset;
    width: unset;
}

.alectryon-toggle:checked ~ .alectryon-io .coq-sentence[for] + .coq-output > div,
.alectryon-io .coq-toggle:checked + .coq-sentence[for] + .coq-output > div {
    display: block;
    margin-bottom: unset;
}

.alectryon-toggle:checked ~ .alectryon-io .coq-toggle ~ .coq-wsp,
.alectryon-io .coq-toggle:checked ~ .coq-wsp {
    display: none;
}

.alectryon-io .coq-responses,
.alectryon-io .coq-response,
.alectryon-io .coq-goals,
.alectryon-io .coq-goal,
.alectryon-io .goal-hyp,
.alectryon-io .goal-conclusion {
    border-radius: 0.15rem;
}

.alectryon-io .coq-goal,
.alectryon-io .coq-response,
.alectryon-io .coq-extra-goals-label {
    margin: 0.25rem;
}

.alectryon-io .coq-goal,
.alectryon-io .coq-response {
    align-items: center;
    background: #d3d7cf;
    display: block;
    flex-direction: column;
    padding: 0.5rem;
    position: relative;
}

.alectryon-io .goal-name {
    display: none; /* Hidden by default */
    position: absolute;
    right: 0.5rem;
    top: 0.5rem;
}

.alectryon-io .goal-hyps {
    align-content: space-around;
    align-items: baseline;
    display: flex;
    flex-flow: column; /* row wrap? */
    justify-content: space-around;
    margin: -0.15rem -1rem;
}

.alectryon-io .goal-hyp,
.alectryon-io .goal-conclusion {
    background: #eeeeec;
    display: inline-block;
    padding: 0.15rem 0.35rem;
}

.alectryon-io .goal-hyp {
    display: inline-flex;
    margin: 0.15rem 1rem;
    z-index: 1;
}

.alectryon-io .hyp-name,
.alectryon-io .hyp-punct {
    font-weight: 600;
}

.alectryon-io .hyp-punct {
    margin: 0 0.5rem;
}

.alectryon-io .hyp-body,
.alectryon-io .hyp-type {
    display: flex;
    vertical-align: top;
}

.alectryon-io .goal-separator {
    background: #555753;
    border: none;
    display: block;
    height: 1px;
    margin: 0.55rem 0;
    width: 100%;
}
