{
  "generator": [
    "Coq+SerAPI",
    "8.12.0+0.12.0"
  ],
  "metadata": {
    "sertop_args": [],
    "cache_version": "1"
  },
  "chunks": [
    "(** * An example using Coqdoc\n\n    This is a hybrid rendering mode: coqdoc is used to render literate comments,\n    and Alectryon is used to render code, responses, and goals.  It's a bit as\n    if coqdoc was just a markup language, _without anything specific to\n    Coq_. Cons:\n\n    - There's a dependency on [coqdoc]\n    - It doesn't use a standard markup language like reST, markdown, etc.\n    - You can't switch back and forth between a code view and a prose view: all\n      prose editing happens in comments.\n    - Annotations can't be applied to whole blocks, so if you want to unfold all\n      sentences in a block you have to say (* .unfold *) on every sentence, for\n      example. **)\n\n(** ** Some code **)\n\n(**\nHere's an *inductive specification* of evenness:\n**)\n\nInductive Even : nat -> Prop :=\n| EvenO : Even O\n| EvenS : forall n, Even n -> Even (S (S n)).\n\n(**\n\u2026 and a corresponding decision procedure:\n**)\n\nFixpoint even (n: nat): bool :=\n  match n with\n  | 0 => true\n  | 1 => false\n  | S (S n) => even n\n  end.\n\n(* Ensure that we never unfold [even (S n)] *)\nArguments even : simpl nomatch.\n\n(**\nCan we prove it correct?\n**)\n\nLemma even_Even :\n  forall n, even n = true <-> Even n. (* .fold *)\nProof.\n  induction n. (* .unfold *)\n  all: cbn. (* .unfold *)\n  - (* .unfold *) split. (* .unfold *)\n    all: constructor. (* .unfold *)\n  - (* .unfold *) Fail apply IHn. (* .fails .no-goals .unfold *)\n\n(**\nThe induction hypothesis doesn't apply \u2014 maybe we need to destruct ``n``?\n**)\n\n    destruct n. (* .unfold *)\n    + (* .unfold *) split; inversion 1. (* .unfold *)\n    + (* .unfold *)\n\n(**\nStuck again!\n**)\n\nAbort.\n\n(** ** Strengthening the spec **)\n\n(** The usual approach is to strengthen the spec: **)\n\nLemma even_Even :\n  forall n, (even n = true <-> Even n) /\\\n       (even (S n) = true <-> Even (S n)). (* .fold *)\nProof.\n  induction n; cbn. (* .unfold *)\n  - (* .unfold *) repeat split; cbn. (* .unfold *)\n    all: try constructor. (* .unfold *)\n    all: inversion 1. (* .unfold *)\n  - (* .unfold *) destruct IHn as ((Hne & HnE) & (HSne & HSnE)). (* .unfold *)\n    repeat split; cbn. (* .unfold *)\n    all: eauto using EvenS. (* .unfold *)\n    inversion 1; eauto.\nQed.\n\n(** ** Writing a fixpoint\n\nBut writing a fixpoint is much nicer: **)\n\nFixpoint even_Even_fp (n: nat):\n  even n = true <-> Even n. (* .fold *)\nProof.\n  destruct n as [ | [ | n ] ]; cbn. (* .unfold *)\n  - (* .unfold *) repeat constructor. (* .unfold *)\n  - (* .unfold *) split; inversion 1. (* .unfold *)\n  - (* .unfold *) split. (* .unfold *)\n    + (* .unfold *) constructor; apply even_Even; assumption.\n    + (* .unfold *) inversion 1; apply even_Even; assumption.\nQed.\n"
  ],
  "annotated": [
    [
      {
        "_type": "text",
        "contents": "(** * An example using Coqdoc\n\n    This is a hybrid rendering mode: coqdoc is used to render literate comments,\n    and Alectryon is used to render code, responses, and goals.  It's a bit as\n    if coqdoc was just a markup language, _without anything specific to\n    Coq_. Cons:\n\n    - There's a dependency on [coqdoc]\n    - It doesn't use a standard markup language like reST, markdown, etc.\n    - You can't switch back and forth between a code view and a prose view: all\n      prose editing happens in comments.\n    - Annotations can't be applied to whole blocks, so if you want to unfold all\n      sentences in a block you have to say (* .unfold *) on every sentence, for\n      example. **)\n\n(** ** Some code **)\n\n(**\nHere's an *inductive specification* of evenness:\n**)\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Inductive Even : nat -> Prop :=\n| EvenO : Even O\n| EvenS : forall n, Even n -> Even (S (S n)).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n(**\n\u2026 and a corresponding decision procedure:\n**)\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Fixpoint even (n: nat): bool :=\n  match n with\n  | 0 => true\n  | 1 => false\n  | S (S n) => even n\n  end.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n(* Ensure that we never unfold [even (S n)] *)\n"
      },
      {
        "_type": "sentence",
        "contents": "Arguments even : simpl nomatch.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n(**\nCan we prove it correct?\n**)\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Lemma even_Even :\n  forall n, even n = true <-> Even n.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "forall n : nat, even n = true <-> Even n",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .fold *)\n"
      },
      {
        "_type": "sentence",
        "contents": "Proof.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "forall n : nat, even n = true <-> Even n",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": "\n  "
      },
      {
        "_type": "sentence",
        "contents": "induction n.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even 0 = true <-> Even 0",
            "hypotheses": []
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even (S n) = true <-> Even (S n)",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even n = true <-> Even n"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "all: cbn.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "true = true <-> Even 0",
            "hypotheses": []
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even (S n) = true <-> Even (S n)",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even n = true <-> Even n"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "-",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "true = true <-> Even 0",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "split.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "true = true -> Even 0",
            "hypotheses": []
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even 0 -> true = true",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "all: constructor.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "-",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even (S n) = true <-> Even (S n)",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even n = true <-> Even n"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "Fail apply IHn.",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nIn environment\nn : nat\nIHn : even n = true <-> Even n\nH : even n = true -> Even n\nUnable to unify \"Even n\" with\n \"even (S n) = true <-> Even (S n)\"."
          }
        ],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even (S n) = true <-> Even (S n)",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even n = true <-> Even n"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .fails .no-goals .unfold *)\n\n(**\nThe induction hypothesis doesn't apply \u2014 maybe we need to destruct ``n``?\n**)\n\n    "
      },
      {
        "_type": "sentence",
        "contents": "destruct n.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even 1 = true <-> Even 1",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even 0 = true <-> Even 0"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even (S (S n)) = true <-> Even (S (S n))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even (S n) = true <-> Even (S n)"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "+",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even 1 = true <-> Even 1",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even 0 = true <-> Even 0"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "split; inversion 1.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "+",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even (S (S n)) = true <-> Even (S (S n))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "even (S n) = true <-> Even (S n)"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n\n(**\nStuck again!\n**)\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Abort.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n(** ** Strengthening the spec **)\n\n(** The usual approach is to strengthen the spec: **)\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Lemma even_Even :\n  forall n, (even n = true <-> Even n) /\\\n       (even (S n) = true <-> Even (S n)).",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "forall n : nat,\n(even n = true <-> Even n) /\\\n(even (S n) = true <-> Even (S n))",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .fold *)\n"
      },
      {
        "_type": "sentence",
        "contents": "Proof.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "forall n : nat,\n(even n = true <-> Even n) /\\\n(even (S n) = true <-> Even (S n))",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": "\n  "
      },
      {
        "_type": "sentence",
        "contents": "induction n; cbn.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "(true = true <-> Even 0) /\\ (false = true <-> Even 1)",
            "hypotheses": []
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "(even (S n) = true <-> Even (S n)) /\\\n(even n = true <-> Even (S (S n)))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "(even n = true <-> Even n) /\\ (even (S n) = true <-> Even (S n))"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "-",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "(true = true <-> Even 0) /\\ (false = true <-> Even 1)",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "repeat split; cbn.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "true = true -> Even 0",
            "hypotheses": []
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "false = true -> Even 1",
            "hypotheses": []
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even 1 -> false = true",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "all: try constructor.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "false = true -> Even 1",
            "hypotheses": []
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even 1 -> false = true",
            "hypotheses": []
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "all: inversion 1.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "-",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "(even (S n) = true <-> Even (S n)) /\\\n(even n = true <-> Even (S (S n)))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "IHn"
                ],
                "body": null,
                "type": "(even n = true <-> Even n) /\\ (even (S n) = true <-> Even (S n))"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "destruct IHn as ((Hne & HnE) & (HSne & HSnE)).",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "(even (S n) = true <-> Even (S n)) /\\\n(even n = true <-> Even (S (S n)))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "Hne"
                ],
                "body": null,
                "type": "even n = true -> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HnE"
                ],
                "body": null,
                "type": "Even n -> even n = true"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSne"
                ],
                "body": null,
                "type": "even (S n) = true -> Even (S n)"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSnE"
                ],
                "body": null,
                "type": "Even (S n) -> even (S n) = true"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "repeat split; cbn.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even (S n) = true -> Even (S n)",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "Hne"
                ],
                "body": null,
                "type": "even n = true -> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HnE"
                ],
                "body": null,
                "type": "Even n -> even n = true"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSne"
                ],
                "body": null,
                "type": "even (S n) = true -> Even (S n)"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSnE"
                ],
                "body": null,
                "type": "Even (S n) -> even (S n) = true"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even (S n) -> even (S n) = true",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "Hne"
                ],
                "body": null,
                "type": "even n = true -> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HnE"
                ],
                "body": null,
                "type": "Even n -> even n = true"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSne"
                ],
                "body": null,
                "type": "even (S n) = true -> Even (S n)"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSnE"
                ],
                "body": null,
                "type": "Even (S n) -> even (S n) = true"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even n = true -> Even (S (S n))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "Hne"
                ],
                "body": null,
                "type": "even n = true -> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HnE"
                ],
                "body": null,
                "type": "Even n -> even n = true"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSne"
                ],
                "body": null,
                "type": "even (S n) = true -> Even (S n)"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSnE"
                ],
                "body": null,
                "type": "Even (S n) -> even (S n) = true"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even (S (S n)) -> even n = true",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "Hne"
                ],
                "body": null,
                "type": "even n = true -> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HnE"
                ],
                "body": null,
                "type": "Even n -> even n = true"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSne"
                ],
                "body": null,
                "type": "even (S n) = true -> Even (S n)"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSnE"
                ],
                "body": null,
                "type": "Even (S n) -> even (S n) = true"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "all: eauto using EvenS.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even (S (S n)) -> even n = true",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "Hne"
                ],
                "body": null,
                "type": "even n = true -> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HnE"
                ],
                "body": null,
                "type": "Even n -> even n = true"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSne"
                ],
                "body": null,
                "type": "even (S n) = true -> Even (S n)"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "HSnE"
                ],
                "body": null,
                "type": "Even (S n) -> even (S n) = true"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "inversion 1; eauto.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Qed.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n(** ** Writing a fixpoint\n\nBut writing a fixpoint is much nicer: **)\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Fixpoint even_Even_fp (n: nat):\n  even n = true <-> Even n.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even n = true <-> Even n",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .fold *)\n"
      },
      {
        "_type": "sentence",
        "contents": "Proof.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even n = true <-> Even n",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": "\n  "
      },
      {
        "_type": "sentence",
        "contents": "destruct n as [ | [ | n ] ]; cbn.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "true = true <-> Even 0",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "false = true <-> Even 1",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even n = true <-> Even (S (S n))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "-",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "true = true <-> Even 0",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "repeat constructor.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "-",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "false = true <-> Even 1",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "split; inversion 1.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n  "
      },
      {
        "_type": "sentence",
        "contents": "-",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even n = true <-> Even (S (S n))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "split.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even n = true -> Even (S (S n))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even (S (S n)) -> even n = true",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)\n    "
      },
      {
        "_type": "sentence",
        "contents": "+",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "even n = true -> Even (S (S n))",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "constructor; apply even_Even; assumption.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n    "
      },
      {
        "_type": "sentence",
        "contents": "+",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "Even (S (S n)) -> even n = true",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "even_Even_fp"
                ],
                "body": null,
                "type": "forall n : nat,\neven n = true <-> Even n"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "n"
                ],
                "body": null,
                "type": "nat"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " (* .unfold *) "
      },
      {
        "_type": "sentence",
        "contents": "inversion 1; apply even_Even; assumption.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Qed.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      }
    ]
  ]
}